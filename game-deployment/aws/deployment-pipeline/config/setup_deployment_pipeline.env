#!/usr/bin/env bash

set -x

# Whether the pipeline should be recreated
RECREATE_PIPELINE="${RECREATE_PIPELINE:-false}"

TEST_ORG=${TRAVIS_REPO_SLUG%/*}
TEST_REPO=${TRAVIS_REPO_SLUG#*/}
DEFAULT_APPLICATION_NAME=${TEST_ORG}-${TEST_REPO}
APPLICATION_NAME="${APPLICATION_NAME:-${DEFAULT_APPLICATION_NAME}}"
DOCKER_IMAGE_NAME=${APPLICATION_NAME}

# Whether the docker image should be private (true) or public (false)
DOCKER_IS_PRIVATE="${DOCKER_IS_PRIVATE:-true}"

COMMIT_MESSAGE_PREFIX="${COMMIT_MESSAGE_PREFIX:-New deployment:}"
DEPLOYMENT_ARTIFACTS_ORG=${TEST_ORG}
REGION="eu-west-1"

BUCKET_NAME="codepipeline-${APPLICATION_NAME}"

CODEBUILD_SERVICE_ROLE_NAME="CodeBuildServiceRole-${APPLICATION_NAME}"
CODEBUILD_SERVICE_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CODEBUILD_SERVICE_ROLE_NAME}"
CODEBUILD_SERVICE_ROLE_POLICY="CodeBuildServiceRolePolicy-${APPLICATION_NAME}"

DEPLOYMENT_ARTIFACTS_REPO=liferay-game-deployment
DEPLOYMENT_ARTIFACTS_BRANCH=master

# If DOCKER_AUTH_TOKEN is not set here, the script will try to read it from
# $HOME/.docker/config.json file.
#DOCKER_AUTH_TOKEN=""

DOCKER_CREDENTIALS_KEY="dockercfg"

EB_EC2_SERVICE_ROLE_NAME="aws-elasticbeanstalk-ec2-role"
EB_EC2_SERVICE_ROLE_POLICY="EbEc2ServiceRolePolicy-${APPLICATION_NAME}"

ENVIRONMENT_SUFFIXES="dev,pre,prod"

INSTANCE_TYPE="t2.large"

REGION="eu-west-1"

TEST_BRANCH=master

set +x